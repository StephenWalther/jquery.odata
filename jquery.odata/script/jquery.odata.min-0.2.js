"use strict"; (function (f) { var u, s, v, w, n; s = function (k) { var l, e, m, o, p, q = function (b) { return b.replace(/^\/+|\/+$/g, '') }, t = function (b) { return b.replace(/\/+$/g, '') }, r = typeof String.trim === 'function' ? String.trim : jQuery.trim; m = { count: false, links: null, resource: null, root: null, value: false, options: { callback: null, expand: null, filter: null, inlinecount: false, orderby: null, params: null, select: null, skip: null, skiptoken: null, top: null} }; if (k !== undefined) { if (f.isPlainObject(k)) { if (k.segments === undefined) { f.extend(true, m, k) } else { f.extend(true, m, k.segments) } } else if (typeof k === 'string') { f.extend(true, m, { root: k }) } } e = null; p = function (b, a) { var c, d, g, j, i, h; a = a || this.segments.root; c = s(); h = b.split('?'); if (h.length > 2) { throw { name: 'invalid input', message: 'input string is not valid, to many ? in the string'} } j = h[1]; c.segments.root = a; d = h[0].toUpperCase(); a = a.toUpperCase(); if (d.indexOf(a) === 0) { g = h[0].slice(a.length) } else if ((i = d.indexOf(a)) > 0) { g = h[0].slice(a.length + i) } else { i = 0; do { a = a.slice(1); i += 1 } while (a.length > 0 && d.indexOf(a) !== 0); g = h[0].slice(a.length) } h = g.split('/$value'); c.segments.value = h.length === 2; g = h[0]; h = g.split('/$count'); c.segments.count = h.length === 2; g = h[0]; if (!c.segments.value && (h = g.split('/$links/')).length === 2) { c.segments.resource = h[0]; c.segments.links = h[1] } else { c.segments.resource = g } if (j !== undefined && j.length > 0) { h = j.split('&'); for (i = 0; i < h.length; i += 1) { h[i] = h[i].split('=') } while (h.length > 0) { d = h.pop(); switch (d[0]) { case '$orderby': c.segments.options.orderby = d[1]; break; case '$top': c.segments.options.top = d[1]; break; case '$skip': c.segments.options.skip = d[1]; break; case '$filter': c.segments.options.filter = d[1]; break; case '$expand': c.segments.options.expand = d[1]; break; case '$select': c.segments.options.select = d[1]; break; case '$skiptoken': c.segments.options.skiptoken = d[1]; break; case '$inlinecount': c.segments.options.inlinecount = d[1] === 'allpages'; break; case '$format': c.segments.options.format = d[1]; break; default: if (c.segments.options.params === null) { c.segments.options.params = {} } c.segments.options.params[d[0]] = d[1]; break } } } return c }; o = function (b) { var a, c, d, g = false, j, i = ''; b = b || this; c = b.segments; a = c.options; if (c.root === null) { return '' } j = c.resource !== null ? q(r(c.resource)) : ''; if (c.links !== null) { j += '/$links/' + q(c.links) } if (c.count) { j += '/$count' } else if (c.value) { j += '/$value' } for (d in a) { if (d !== undefined && a[d] !== null) { switch (d) { case 'params': for (d in a.params) { if (d !== undefined) { if (g) { i += '&' } i += d + "=" + a.params[d]; g = true } } break; case 'inlinecount': if (a.inlinecount) { if (g) { i += '&' } i += "$inlinecount=allpages"; g = true; break } break; case 'format': if (a[d] === 'json' && (c.count || c.value)) { break } case 'callback': case 'orderby': case 'top': case 'skip': case 'filter': case 'expand': case 'select': case 'skiptoken': if (g) { i += '&' } i += "$" + d + "=" + a[d]; g = true; break } } } b.uri = t(r(c.root)); b.uri += (j !== '' ? '/' + j : ''); b.uri += (i !== '' ? '?' + i : ''); return b.uri }; l = {}; l.segments = m; l.parse = p; l.uri = e; l.toString = l.toLocaleString = o; l.isLocalService = l.segments.root !== null && (!/^http:\/\/|https:\/\//i.test(l.segments.root) || l.segments.root.toLowerCase().indexOf(location.protocol + '//' + location.host) === 0); return l }; u = function (i, h) { var k; k = {}; k.settings = h || {}; k.uri = s(i); if (k.settings.dataType !== undefined && k.settings.dataType === 'jsonp') { k.uri.segments.options.format = 'json'; k.uri.segments.options.callback = 'resultCallback' } k.from = function (b) { return v.apply(f.extend({}, this), [b]) }; k.query = function (b) { if (f.isFunction(b)) { b = { success: b} } n(this, b) }; k.create = function (b, a, c) { var d; if (f.isFunction(c)) { c = { success: c} } c.type = "POST"; c.data = JSON.stringify(a); d = f.extend(true, {}, this); d.uri.segments.resource = b; n(d, c) }; k.update = function (b, a, c) { var d, g, j = { partial: true, force: false, etag: null }; if (f.isFunction(c)) { c = { success: c} } if (c.etag === undefined && a.__metadata !== undefined && a.__metadata.etag !== undefined) { c.etag = a.__metadata.etag } g = f.extend({}, j, c); g.type = g.partial ? "MERGE" : "PUT"; if (f.isPlainObject(a)) { g.data = JSON.stringify(a); g.contentType = 'application/json' } else { g.data = a.toString(); g.contentType = 'text/plain' } d = f.extend(true, {}, this); d.uri.segments.resource = b; n(d, g) }; k['delete'] = k.deleteEntry = k.remove = function (b, a) { var c, d, g = { force: false, etag: null }; if (f.isFunction(a)) { a = { success: a} } if (a.etag === undefined && b.__metadata !== undefined && b.__metadata.etag !== undefined) { a.etag = b.__metadata.etag } d = f.extend({}, g, a); if (d.force) { d.etag = '*' } d.type = "DELETE"; c = f.extend(true, {}, this); if (f.isPlainObject(b)) { if (b.__metadata !== undefined && b.__metadata.uri !== undefined) { c.uri = c.uri.parse(b.__metadata.uri) } else { c.uri = b } } else if (typeof b === 'string') { c.uri = c.uri.parse(b) } n(c, d) }; return k }; v = function (g) { var j = this, i, h, k, l, e, m, o, p, q, t, r; k = function (b) { var a; a = f.extend(true, {}, this); a.uri.segments.links = b; return a }; e = function (b) { var a; a = f.extend(true, {}, this); a.uri.segments.options.orderby = b; return a }; m = function (b) { var a; a = f.extend(true, {}, this); a.uri.segments.options.top = b; return a }; o = function (b) { var a; a = f.extend(true, {}, this); a.uri.segments.options.skip = b; return a }; p = function (b) { var a; a = f.extend(true, {}, this); a.uri.segments.options.filter = b; return a }; q = function (b) { var a; a = f.extend(true, {}, this); a.uri.segments.options.expand = b; return a }; t = function (b) { var a; a = f.extend(true, {}, this); a.uri.segments.options.select = b; return a }; r = function (b) { var a; b = b === undefined ? true : b; a = f.extend(true, {}, this); a.uri.segments.options.inlinecount = b; return a }; l = function (b) { var a; a = f.extend(true, {}, this); a.uri.segments.options.params = b; return a }; h = function (b) { var a, c = true, d = b; if (typeof b === 'boolean') { c = b } else if (f.isFunction(b)) { d = { success: b} } else if (b === undefined) { c = false } a = f.extend(true, {}, this); a.uri.segments.count = true; if (c) { a.query(d) } else { return a } }; i = function (b) { var a, c = true, d = b; if (typeof b === 'boolean') { c = b } else if (f.isFunction(b)) { d = { success: b} } else if (b === undefined) { c = false } a = f.extend(true, {}, this); a.uri.segments.value = true; if (c) { a.query(d) } else { return a } }; j.uri.segments.resource = g; j.value = i; j.count = h; j.params = l; j.orderby = e; j.top = m; j.skip = o; j.filter = p; j.expand = q; j.select = t; j.links = k; j.inlinecount = r; return j }; w = function (b, a, c) { var d = {}; d.data = b.d === undefined ? b : b.d; if (a !== undefined) { d.version = a.getResponseHeader("DataServiceVersion").replace(';', ''); d.ETag = a.getResponseHeader("ETag"); d.status = a.status; d.statusText = a.statusText } d.query = c; return d }; n = function (i, h) { var k, l, e, m = { contentType: 'application/json', dataType: 'json', etag: null, type: "GET" }; e = jQuery.extend({}, m, i.settings, h); e.actualType = e.type === "PUT" || e.type === "DELETE" || e.type === "MERGE" ? "POST" : e.type; if (e.type === 'GET' && e.dataType !== 'jsonp') { if (i.uri.value) { e.dataType = '*/*' } else if (i.uri.count) { e.dataType = 'text' } } else if (e.type === "PUT" || e.type === "DELETE" || e.type === "MERGE") { e.dataType = '*/*' } if (e.type === "DELETE") { e.dataType = '*/*' } if (e.dataType === 'jsonp') { e.jsonpCallback = "resultCallback" } k = function (b, a, c) { if (f.isFunction(e.success)) { e.success(w(b, c, i), a, c) } }; l = function (g, j) { if (j === 'json' || j === 'jsonp') { g = JSON.parse(g, function (b, a) { var c, d; if (a !== null) { if (a.toString().indexOf('Date') !== -1) { c = /^\/Date\((-?\d+)([\-|+]\d+)?\)\/$/.exec(a); if (c) { d = new Date(parseInt(c[1], 10)); return d } } return a } }) } return g }; f.ajax({ beforeSend: function (b) { b.setRequestHeader('MaxDataServiceVersion', '2.0'); if (i.uri.segments.count || i.uri.segments.options.inlinecount || i.uri.segments.options.select !== undefined) { b.setRequestHeader('DataServiceVersion', '2.0') } else { b.setRequestHeader('DataServiceVersion', '1.0') } if (e.etag !== null) { b.setRequestHeader('If-Match', e.etag) } if (h.type === "DELETE" || h.type === "PUT" || h.type === "MERGE") { b.setRequestHeader('X-HTTP-Method', h.type) } if (f.isFunction(e.beforeSend)) { e.beforeSend(b) } }, dataFilter: l, data: e.data, dataType: e.dataType, contentType: e.contentType, password: e.password, username: e.username, timeout: e.timeout, type: e.actualType, jsonpCallback: e.jsonpCallback, processData: false, url: i.uri.toString(), success: k, complete: e.complete, error: e.error }) }; f.odata = u; f.odataUri = s } (jQuery));