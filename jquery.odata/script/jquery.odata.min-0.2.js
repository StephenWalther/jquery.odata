"use strict"; (function (f) { var c, b, a, d, e; b = function (o) { var m, g, k, l, j, n = function (p) { return p.replace(/^\/+|\/+$/g, "") }, i = function (p) { return p.replace(/\/+$/g, "") }, h = typeof String.trim === "function" ? String.trim : jQuery.trim; k = { count: false, links: null, resource: null, root: null, value: false, options: { callback: null, expand: null, filter: null, inlinecount: false, orderby: null, params: null, select: null, skip: null, skiptoken: null, top: null} }; if (o !== undefined) { if (f.isPlainObject(o)) { if (o.segments === undefined) { f.extend(true, k, o) } else { f.extend(true, k, o.segments) } } else { if (typeof o === "string") { f.extend(true, k, { root: o }) } } } g = null; j = function (w, p) { var s, q, u, v, r, t; p = p || this.segments.root; s = b(); t = w.split("?"); if (t.length > 2) { throw { name: "invalid input", message: "input string is not valid, to many ? in the string"} } v = t[1]; s.segments.root = p; q = t[0].toUpperCase(); p = p.toUpperCase(); if (q.indexOf(p) === 0) { u = t[0].slice(p.length) } else { if ((r = q.indexOf(p)) > 0) { u = t[0].slice(p.length + r) } else { r = 0; do { p = p.slice(1); r += 1 } while (p.length > 0 && q.indexOf(p) !== 0); u = t[0].slice(p.length) } } t = u.split("/$value"); s.segments.value = t.length === 2; u = t[0]; t = u.split("/$count"); s.segments.count = t.length === 2; u = t[0]; if (!s.segments.value && (t = u.split("/$links/")).length === 2) { s.segments.resource = t[0]; s.segments.links = t[1] } else { s.segments.resource = u } if (v !== undefined && v.length > 0) { t = v.split("&"); for (r = 0; r < t.length; r += 1) { t[r] = t[r].split("=") } while (t.length > 0) { q = t.pop(); switch (q[0]) { case "$orderby": s.segments.options.orderby = q[1]; break; case "$top": s.segments.options.top = q[1]; break; case "$skip": s.segments.options.skip = q[1]; break; case "$filter": s.segments.options.filter = q[1]; break; case "$expand": s.segments.options.expand = q[1]; break; case "$select": s.segments.options.select = q[1]; break; case "$skiptoken": s.segments.options.skiptoken = q[1]; break; case "$inlinecount": s.segments.options.inlinecount = q[1] === "allpages"; break; case "$format": s.segments.options.format = q[1]; break; default: if (s.segments.options.params === null) { s.segments.options.params = {} } s.segments.options.params[q[0]] = q[1]; break } } } return s }; l = function (w) { var s, v, t, r = false, u, q = ""; w = w || this; v = w.segments; s = v.options; if (v.root === null) { return "" } u = v.resource !== null ? n(h(v.resource)) : ""; if (v.links !== null) { u += "/$links/" + n(v.links) } if (v.count) { u += "/$count" } else { if (v.value) { u += "/$value" } } for (t in s) { if (t !== undefined && s[t] !== null) { switch (t) { case "params": for (t in s.params) { if (t !== undefined) { if (r) { q += "&" } q += t + "=" + s.params[t]; r = true } } break; case "inlinecount": if (s.inlinecount) { if (r) { q += "&" } q += "$inlinecount=allpages"; r = true; break } break; case "format": if (s[t] === "json" && (v.count || v.value)) { break } case "callback": case "orderby": case "top": case "skip": case "filter": case "expand": case "select": case "skiptoken": if (r) { q += "&" } q += "$" + t + "=" + s[t]; r = true; break } } } w.uri = i(h(v.root)); w.uri += (u !== "" ? "/" + u : ""); w.uri += (q !== "" ? "?" + q : ""); return w.uri }; m = {}; m.segments = k; m.parse = j; m.uri = g; m.toString = m.toLocaleString = l; m.isLocalService = m.segments.root !== null && (!/^http:\/\/|https:\/\//i.test(m.segments.root) || m.segments.root.toLowerCase().indexOf(location.protocol + "//" + location.host) === 0); return m }; c = function (i, g) { var h; h = {}; h.settings = g || {}; h.uri = b(i); if (h.settings.dataType !== undefined && h.settings.dataType === "jsonp") { h.uri.segments.options.format = "json"; h.uri.segments.options.callback = "resultCallback" } h.from = function (j) { return a.apply(f.extend({}, this), [j]) }; h.query = function (j) { if (f.isFunction(j)) { j = { success: j} } e(this, j) }; h.create = function (m, l, j) { var k; if (f.isFunction(j)) { j = { success: j} } j.type = "POST"; j.data = JSON.stringify(l); k = f.extend(true, {}, this); k.uri.segments.resource = m; e(k, j) }; h.update = function (o, m, j) { var l, k, n = { partial: true, force: false, etag: null }; if (f.isFunction(j)) { j = { success: j} } if (j.etag === undefined && m.__metadata !== undefined && m.__metadata.etag !== undefined) { j.etag = m.__metadata.etag } k = f.extend({}, n, j); k.type = k.partial ? "MERGE" : "PUT"; if (f.isPlainObject(m)) { k.data = JSON.stringify(m); k.contentType = "application/json" } else { k.data = m.toString(); k.contentType = "text/plain" } l = f.extend(true, {}, this); l.uri.segments.resource = o; e(l, k) }; h["delete"] = h.deleteEntry = h.remove = function (m, j) { var l, k, n = { force: false, etag: null }; if (f.isFunction(j)) { j = { success: j} } if (j.etag === undefined && m.__metadata !== undefined && m.__metadata.etag !== undefined) { j.etag = m.__metadata.etag } k = f.extend({}, n, j); if (k.force) { k.etag = "*" } k.type = "DELETE"; l = f.extend(true, {}, this); if (f.isPlainObject(m)) { if (m.__metadata !== undefined && m.__metadata.uri !== undefined) { l.uri = l.uri.parse(m.__metadata.uri) } else { l.uri = m } } else { if (typeof m === "string") { l.uri = l.uri.parse(m) } } e(l, k) }; return h }; a = function (i) { var j = this, p, k, s, h, l, m, r, g, o, n, q; s = function (u) { var t; t = f.extend(true, {}, this); t.uri.segments.links = u; return t }; l = function (t) { var u; u = f.extend(true, {}, this); u.uri.segments.options.orderby = t; return u }; m = function (u) { var t; t = f.extend(true, {}, this); t.uri.segments.options.top = u; return t }; r = function (u) { var t; t = f.extend(true, {}, this); t.uri.segments.options.skip = u; return t }; g = function (t) { var u; u = f.extend(true, {}, this); u.uri.segments.options.filter = t; return u }; o = function (t) { var u; u = f.extend(true, {}, this); u.uri.segments.options.expand = t; return u }; n = function (t) { var u; u = f.extend(true, {}, this); u.uri.segments.options.select = t; return u }; q = function (t) { var u; t = t === undefined ? true : t; u = f.extend(true, {}, this); u.uri.segments.options.inlinecount = t; return u }; h = function (u) { var t; t = f.extend(true, {}, this); t.uri.segments.options.params = u; return t }; k = function (v) { var w, t = true, u = v; if (typeof v === "boolean") { t = v } else { if (f.isFunction(v)) { u = { success: v} } else { if (v === undefined) { t = false } } } w = f.extend(true, {}, this); w.uri.segments.count = true; if (t) { w.query(u) } else { return w } }; p = function (v) { var w, t = true, u = v; if (typeof v === "boolean") { t = v } else { if (f.isFunction(v)) { u = { success: v} } else { if (v === undefined) { t = false } } } w = f.extend(true, {}, this); w.uri.segments.value = true; if (t) { w.query(u) } else { return w } }; j.uri.segments.resource = i; j.value = p; j.count = k; j.params = h; j.orderby = l; j.top = m; j.skip = r; j.filter = g; j.expand = o; j.select = n; j.links = s; j.inlinecount = q; return j }; d = function (i, j, h) { var g = {}; g.data = i.d === undefined ? i : i.d; if (j !== undefined) { g.version = j.getResponseHeader("DataServiceVersion").replace(";", ""); g.ETag = j.getResponseHeader("ETag"); g.status = j.status; g.statusText = j.statusText } g.query = h; return g }; e = function (k, h) { var g, j, i, l = { contentType: "application/json", dataType: "json", etag: null, type: "GET" }; i = jQuery.extend({}, l, k.settings, h); i.actualType = i.type === "PUT" || i.type === "DELETE" || i.type === "MERGE" ? "POST" : i.type; if (i.type === "GET" && i.dataType !== "jsonp") { if (k.uri.value) { i.dataType = "*/*" } else { if (k.uri.count) { i.dataType = "text" } } } else { if (i.type === "PUT" || i.type === "DELETE" || i.type === "MERGE") { i.dataType = "*/*" } } if (i.type === "DELETE") { i.dataType = "*/*" } if (i.dataType === "jsonp") { i.jsonpCallback = "resultCallback" } g = function (m, o, n) { if (f.isFunction(i.success)) { i.success(d(m, n, k), o, n) } }; j = function (n, m) { if (m === "json" || m === "jsonp") { n = JSON.parse(n, function (p, r) { var q, o; if (r !== null) { if (r.toString().indexOf("Date") !== -1) { q = /^\/Date\((-?\d+)([\-|+]\d+)?\)\/$/.exec(r); if (q) { o = new Date(parseInt(q[1], 10)); return o } } return r } }) } return n }; f.ajax({ beforeSend: function (m) { m.setRequestHeader("MaxDataServiceVersion", "2.0"); if (k.uri.segments.count || k.uri.segments.options.inlinecount || k.uri.segments.options.select !== undefined) { m.setRequestHeader("DataServiceVersion", "2.0") } else { m.setRequestHeader("DataServiceVersion", "1.0") } if (i.etag !== null) { m.setRequestHeader("If-Match", i.etag) } if (h.type === "DELETE" || h.type === "PUT" || h.type === "MERGE") { m.setRequestHeader("X-HTTP-Method", h.type) } if (f.isFunction(i.beforeSend)) { i.beforeSend(m) } }, dataFilter: j, data: i.data, dataType: i.dataType, contentType: i.contentType, password: i.password, username: i.username, timeout: i.timeout, type: i.actualType, jsonpCallback: i.jsonpCallback, processData: false, url: k.uri.toString(), success: g, complete: i.complete, error: i.error }) }; f.odata = c; f.odataUri = b } (jQuery));
